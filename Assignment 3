from dataclasses import dataclass
from typing import List

@dataclass
class Employee:
    id: int
    name: str
    department: str
    job_title: str
    basic_salary: float
    manager_id: int

@dataclass
class Guest:
    id: int
    name: str
    department: str
    job_title: str
    basic_salary: float
    manager_id: int

@dataclass
class Venue:
    id: int
    name: str
    capacity: int

@dataclass
class Client:
    id: int
    name: str
    email: str
    phone: str

@dataclass
class Event:
    id: int
    type: str
    theme: str
    date: str
    time: str
    duration: str
    venue: int
    client: int
    guests: List[Guest]
    caterer: int
    cleaning_company: int
    decorations_company: int
    entertainment_company: int
    furniture_supply_company: int

@dataclass
class Invoice:
    event: Event
    total_cost: float

@dataclass
class CateringCompany:
    pass

@dataclass
class CleaningCompany:
    pass

@dataclass
class DecorationsCompany:
    pass

@dataclass
class EntertainmentCompany:
    pass

@dataclass
class FurnitureSupplyCompany:
    pass

def test_event():
    # Create a new event
    event = Event(
        id=1,
        type="Wedding",
        theme="Classic",
        date="2024-06-10",
        time="1:00 PM",
        duration="5 hours",
        venue=1,
        client=1,
        guests=[
            Guest(
                id=1,
                name="Mahra Ali",
                department="Marketing",
                job_title="Marketer",
                basic_salary=50000.00,
                manager_id=2
            ),
            Guest(
                id=2,
                name="Sara Mohammed",
                department="Sales",
                job_title="Salesperson",
                basic_salary=60000.00,
                manager_id=3
            )
        ],
        caterer=1,
        cleaning_company=2,
        decorations_company=3,
        entertainment_company=4,
        furniture_supply_company=5
    )

    # Test event attributes
    assert event.id == 1
    assert event.type == "Wedding"
    assert event.theme == "Classic"
    assert event.date == "2024-06-10"
    assert event.time == "1:00 PM"
    assert event.duration == "5 hours"
    assert event.venue == 1
    assert event.client == 1
    assert len(event.guests) == 2
    assert event.guests[0].id == 1
    assert event.guests[0].name == "Mahra Ali"
    assert event.guests[0].department == "Marketing"
    assert event.guests[0].job_title == "Marketer"
    assert event.guests[0].basic_salary == 50000.00
    assert event.guests[0].manager_id == 2
    assert event.guests[1].id == 2
    assert event.guests[1].name == "Sara Mohammed"
    assert event.guests[1].department == "Sales"
    assert event.guests[1].job_title == "Salesperson"
    assert event.guests[1].basic_salary == 60000.00
    assert event.guests[1].manager_id == 3
    assert event.caterer == 1
    assert event.cleaning_company== 2
    assert event.decorations_company == 3
    assert event.entertainment_company == 4
    assert event.furniture_supply_company == 5

    # Test creating an invoice for the event
    invoice = Invoice(event=event, total_cost=10000.00)
    assert invoice.event == event
    assert invoice.total_cost == 10000.00

if __name__ == "__main__":
    test_event()


# GUI REQUIREMENTS 
# Requirement 4 

import tkinter as tk
from tkinter import messagebox
from dataclasses import dataclass
from typing import List

# Data classes for employees, clients, events, guests, suppliers, and venues
@dataclass
class Employee:
    id: int
    name: str
    department: str
    job_title: str
    basic_salary: float
    manager_id: int

@dataclass
class Client:
    id: int
    name: str
    address: str
    contact_number: str
    email: str

@dataclass
class Event:
    id: int
    type: str
    theme: str
    date: str
    time: str
    duration: str
    venue: int
    client: int
    guests: List[Guest]
    caterer: int
    cleaning_company: int
    decorations_company: int
    entertainment_company: int
    furniture_supply_company: int

@dataclass
class Guest:
    id: int
    name: str
    department: str
    job_title: str
    basic_salary: float
    manager_id: int

@dataclass
class Supplier:
    id: int
    name: str
    contact_number: str
    email: str

@dataclass
class Venue:
    id: int
    name: str
    capacity: int
    cost_per_hour: float

# Function to create and show the GUI
def main():
    root = tk.Tk()
    app = Application(root)
    root.mainloop()

# Application class
class Application(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.master = master
        self.create_widgets()
        self.grid()

    def create_widgets(self):
        # Add/Delete/Modify buttons
        self.add_employee_button = tk.Button(self, text="Add Employee", command=self.add_employee)
        self.delete_employee_button = tk.Button(self, text="Delete Employee", command=self.delete_employee)
        self.modify_employee_button = tk.Button(self, text="Modify Employee", command=self.modify_employee)
        self.add_client_button = tk.Button(self, text="Add Client", command=self.add_client)
        self.delete_client_button = tk.Button(self, text="Delete Client", command=self.delete_client)
        self.modify_client_button = tk.Button(self, text="Modify Client", command=self.modify_client)
        self.add_event_button = tk.Button(self, text="Add Event", command=self.add_event)
        self.delete_event_button = tk.Button(self, text="Delete Event", command=self.delete_event)
        self.modify_event_button = tk.Button(self, text="Modify Event", command=self.modify_event)
        self.add_guest_button = tk.Button(self, text="Add Guest", command=self.add_guest)
        self.delete_guest_button = tk.Button(self, text="Delete Guest", command=self.delete_guest)
        self.modify_guest_button = tk.Button(self, text="Modify Guest", command=self.modify_guest)
        self.add_supplier_button = tk.Button(self, text="Add Supplier", command=self.add_supplier)
        self.delete_supplier_button = tk.Button(self, text="Delete Supplier", command=self.delete_supplier)
        self.modify_supplier_button = tk.Button(self, text="Modify Supplier", command=self.modify_supplier)
        self.add_venue_button = tk.Button(self, text="Add Venue", command=self.add_venue)
        self.delete_venue_button = tk.Button(self, text="Delete Venue", command=self.delete_venue)
        self.modify_

# Aplication code 
import pickle

# Constants for file extensions
EMPLOYEES_FILE = 'employees.bin'
CLIENTS_FILE = 'clients.bin'
EVENTS_FILE = 'events.bin'
SUPPLIERS_FILE = 'suppliers.bin'


def load_data(file_name):
    try:
        with open(file_name, 'rb') as file:
            data = pickle.load(file)
        return data
    except FileNotFoundError:
        return []


def save_data(file_name, data):
    with open(file_name, 'wb') as file:
        pickle.dump(data, file)


class Application:
    def __init__(self):
        self.employees = load_data(EMPLOYEES_FILE)
        self.clients = load_data(CLIENTS_FILE)
        self.events = load_data(EVENTS_FILE)
        self.suppliers = load_data(SUPPLIERS_FILE)

        self.employee_actions = EmployeeActions(self.employees)
        self.client_actions = ClientActions(self.clients)
        self.event_actions = EventActions(self.events)
        self.supplier_actions = SupplierActions(self.suppliers)


class EmployeeActions:
    def __init__(self, employees):
        self.employees = employees
        self.selected_employee = None

    def add_employee(self, name, role, email):
        employee = {'name': name, 'role': role, 'email': email}
        self.employees.append(employee)
        self.save_data()
        return employee

    def update_employee(self, index, name, role, email):
        self.employees[index] = {'name': name, 'role': role, 'email': email}
        self.save_data()

    def delete_employee(self, index):
        del self.employees[index]
        self.save_data()

    def get_employee(self, index):
        return self.employees[index]

    def get_selected_employee(self):
        return self.selected_employee

    def save_data(self):
        save_data(EMPLOYEES_FILE, self.employees)


class ClientActions:
    def __init__(self, clients):
        self.clients = clients
        self.selected_client = None

    def add_client(self, name, contact_name, phone, email):
        client = {'name': name, 'contact_name': contact_name, 'phone': phone, 'email': email}
        self.clients.append(client)
        self.save_data()
        return client

    def update_client(self, index, name, contact_name, phone, email):
        self.clients[index] = {'name': name, 'contact_name': contact_name, 'phone': phone, 'email': email}
        self.save_data()

    def delete_client(self, index):
        del self.clients[index]
        self.save_data()

    def get_client(self, index):
        return self.clients[index]

    def get_selected_client(self):
        return self.selected_client

    def save_data(self):
        save_data(CLIENTS_FILE, self.clients)


class EventActions:
    def __init__(self, events):
        self.events = events
        self.selected_event = None

    def add_event(self, name, start_date, end_date, budget, attendees):
        event = {'name': name, 'start_date': start_date, 'end_date': end_date, 'budget': budget, 'attendees': attendees}
        self.events.append(event)
        self.save_data()
        return event

    def update_event(self, index, name, start_date, end_date, budget, attendees):
        self.events[index] = {'name': name, 'start_date': start_date, 'end_date': end_date, 'budget': budget, 'attendees': attendees}
        self.save_data()

    def delete_event(self, index):
        del self.events[index]
        self.save_data()

    def get_event(self, index):
        return self.events[index]

    def get_selected_event(self):
        return self.selected_event

    def save_data(self):
        save_data(EVENTS_FILE, self.events)


class SupplierActions:
    def __init__(self, suppliers):
        self.suppliers = suppliers
        self.selected_supplier = None

    def add_supplier(self, name, contact_name, phone, email):
        supplier = {'name': name, 'contact_name': contact_name, 'phone': phone, 'email': email}
        self.suppliers.append(supplier)
        self.save_data()
        return supplier

    def update_supplier(self, index, name, contact_name, phone, email):
        self.suppliers[index] = {'name': name, 'contact_name': contact_name, 'phone': phone, 'email': email}
        self.save_data()

    def delete_supplier(self, index):
        del self.suppliers[index]
        self.save_data()

    def get_supplier(self, index):
        return self.suppliers[index]

    def get_selected_supplier(self):
        return self.selected_supplier

    def save_data(self):
        save_data(SUPPLIERS_FILE, self.suppliers)


if __name__ == '__main__':
    app = Application()
# Business app code 
import pickle


class EmployeeActions:
    def __init__(self):
        self.employees = []
        self.selected_employee = None

    def add_employee(self, name, email):
        employee = {'name': name, 'email': email}
        self.employees.append(employee)
        self.selected_employee = employee
        return employee

    def update_employee(self, index, name, email):
        self.employees[index]['name'] = name
        self.employees[index]['email'] = email
        self.selected_employee = self.employees[index]

    def delete_employee(self, index):
        del self.employees[index]
        if self.selected_employee == self.employees[index]:
            self.selected_employee = None

    def get_employee(self, index):
        return self.employees[index]

    def get_selected_employee(self):
        return self.selected_employee

    def save_data(self):
        save_data('employees.bin', self.employees)

    def load_data(self):
        self.employees = load_data('employees.bin')


class ClientActions(EmployeeActions):
    def save_data(self):
        save_data('clients.bin', self.employees)

    def load_data(self):
        self.employees = load_data('clients.bin')

class EventActions(EmployeeActions):
    def save_data(self):
        save_data('events.bin', self.employees)

    def load_data(self):
        self.employees = load_data('events.bin')

class SupplierActions(EmployeeActions):
    def save_data(self):
        save_data('suppliers.bin', self.employees)

    def load_data(self):
        self.employees = load_data('suppliers.bin')


class BusinessApp:
    def __init__(self):
        self.employee_actions = EmployeeActions()
        self.client_actions = ClientActions()
        self.event_actions = EventActions()
        self.supplier_actions = SupplierActions()

    def run(self):
        # Add a new employee
        new_employee = self.employee_actions.add_employee('Sara Mohammed ', 'Sara.Mohammed@example.com')

        # Update an employee
        self.employee_actions.update_employee(0, 'Mahra Ali ', 'Mahra.Ali@example.com')

        # Delete an employee
        self.employee_actions.delete_employee(0)

        # Get an employee
        employee = self.employee_actions.get_employee(0)

        # Get the selected employee
        selected_employee = self.employee_actions.get_selected_employee()

        # Save data
        self.employee_actions.save_data()

        # Load data
        loaded_employees = self.employee_actions.load_data()

        print(employee)
        print(selected_employee)
        print(loaded_employees)


def load_data(file_name):
    with open(file_name, 'rb') as file:
        return pickle.load(file)


def save_data(file_name, data):
    with open(file_name, 'wb') as file:
        pickle.dump(data, file)


app = BusinessApp()
app.run()

#Comleting the code

import pickle
from dataclasses import dataclass
from typing import List

@dataclass
class Address:
    street: str
    city: str
    state: str
    zip_code: str

@dataclass
class Budget:
    amount: float

@dataclass
class EventType:
    name: str
    caterers: List[str]
    cleaning_companies: List[str]
    decorations_companies: List[str]
    entertainment_companies: List[str]
    furniture_supply_companies: List[str]

@dataclass
class Caterer:
    name: str
    address: Address
    menu_items: List[str]
    min_guests: int
    max_guests: int

@dataclass
class CleaningCompany:
    name: str
    address: Address
    min_guests: int
    max_guests: int

@dataclass
class DecorationsCompany:
    name: str
    address: Address

@dataclass
class EntertainmentCompany:
    name: str
    address: Address

@dataclass
class FurnitureSupplyCompany:
    name: str
    address: Address

@dataclass
class Guest:
$@$v=v1.16$@$name: str
    address: Address

@dataclass
class Invoice:
    total_cost: float
    event: Event

@dataclass
class MenuItem:
    name: str
    price: float

@dataclass
class Venue:
    name: str
    address: Address
    min_guests: int
    max_guests: int
    cost_per_hour: float

@dataclass
class Client:
    id: int
    name: str
    address: Address
    budget: Budget
    events: List[Event]

@dataclass
class Event:
    id: int
    date: str
    time: str
    duration: str
    venue: Venue
    client: Client
    guests: List[Guest]
    caterer: Caterer
    cleaning_company: CleaningCompany
    decorations_company: DecorationsCompany
    entertainment_company: EntertainmentCompany
    furniture_supply_company: FurnitureSupplyCompany
    invoice: Invoice

def load_data(file_name):
    try:
        with open(file_name, 'rb') as file:
            return pickle.load(file)
    except FileNotFoundError:
        return []

def save_data(file_name, data):
    with open(file_name, 'wb') as file:
        pickle.dump(data, file)

def add_employee(employees, employee):
    employees.append(employee)

def delete_employee(employees, employee_id):
    employees = [employee for employee in employees if employee.id != employee_id]

def modify_employee(employees, employee_id, new_name, new_address):
    employee = next((employee for employee in employees if employee.id == employee_id), None)
    if employee:
        employee.name = new_name
        employee.address = new_address

def display_employees(employees):
    for employee in employees:
        print(employee)

def display_employee(employees, employee_id):
    employee = next((employee for employee in employees if employee.id == employee_id), None)
    if employee:
        print(employee)

def add_client(clients, client):
    clients.append(client)

def delete_client(clients, client_id):
    clients = [client for client in clients if client.id != client_id]

def modify_client(clients, client_id, new_name, new_address, new_budget):
    client = next((client for client in clients if client.id == client_id), None)
    if client:
        client.name = new_name
        client.address = new_address
        client.budget = new_budget

def display_clients(clients):
    for client in clients:
        print(client)

def display_client(clients, client_id):
    client = next((client for client in clients if client.id == client_id), None)
    if client:
        print(client)

def add_event(events, event):
    events.append(event)

def delete_event(events, event_id):
    events = [event for event in events if event.id != event_id]

def modify_event(events, event_id, new_date, new_time, new_duration, new_venue, new_client, new_guests, new_caterer, new_cleaning_company, new_decorations_company, new_entertainment_company, new_furniture_supply_company, new_invoice):
    event = next((event for event in events if event.id == event_id), None)
    if event:
        event.date = new_date
        event.time = new_time
        event.duration = new_duration
        event.venue = new_venue
        event.client = new_client
        event.guests = new_guests
        event.caterer = new_caterer
        event.cleaning_company = new_cleaning_company
        event.decorations_company = new_decorations_company
        event.entertainment_company = new_entertainment_company
        event.furniture_supply_company = new_furniture_supply_company
        event.invoice = new_invoice

def display_events(events):
    for event in events:
        print(event)

def display_event(events, event_id):
    event = next((event for event in events if event.id == event_id), None)
    if event:
        print(event)

def create_menu_item(menu_items, name, price):
    menu_item = MenuItem(name, price)
    menu_items.append(menu_item)

def delete_menu_item(menu_items, menu_item_name):
    menu_items = [menu_item for menu_item in menu_items if menu_item.name != menu_item_name]

def modify_menu_item(menu_items, menu_item_name, new_price):
    menu_item = next((menu_item for menu_item in menu_items if menu_item.name == menu_item_name), None)
    if menu_item:
        menu_item.price = new_price

def display_menu_items(menu_items):
    for menu_item in menu_items:
        print(menu_item)

def display_menu_item(menu_items, menu_item_name):
    menu_item = next((menu_item for menu_item in menu_items if menu_item.name == menu_item_name), None)
    if menu_item:
        print(menu_item)

def add_venue(venues, venue):
    venues.append(venue)

def delete_venue(venues, venue_name):
    venues = [venue for venue in venues if venue.name != venue_name]

def modify_venue(venues, venue_name, new_address, new_min_guests, new_max_guests, new_cost_per_hour):
    venue = next((venue for venue in venues if venue.name == venue_name), None)
    if venue:
        venue.address = new_address
        venue.min_guests = new_min_guests
        venue.max_guests = new_max_guests
        venue.cost_per_hour = new_cost_per_hour

def display_venues(venues):
    for venue in venues:
        print(venue)

def display_venue(venues, venue_name):
    venue = next((venue for venue in venues if venue.name == venue_name), None)
    if venue:
        print(venue)

def calculate_total_cost(event):
    total_cost = 0
    if event.caterer:
        total_cost += event.caterer.menu_items_cost(event.caterer.menu_items)
    if event.cleaning_company:
        total_cost += event.cleaning_company.cost
    if event.decorations_company:
        total_cost += event.decorations_company.cost
    if event.entertainment_company:
        total_cost += event.entertainment_company.cost
    if event.furniture_supply_company:
        total_cost += event.furniture_supply_company.cost
    if event.venue:
        total_cost += event.venue.cost_per_hour * int(event.duration)
    return total_cost

def main():
    # Load data from files
    employees = load_data('employees.pickle')
    clients = load_data('clients.pickle')
    events = load_data('events.pickle')
    menu_items = load_data('menu_items.pickle')
    venues = load_data('venues.pickle')

    # Add a client
    new_client = Client(1, 'Sara Mohammed', Address('123 Main St', 'City', 'State', 'Zip'), Budget(1000, 2000), [])
    add_client(clients, new_client)
    save_data('clients.pickle', clients)

    # Delete a client
    delete_client$@$v=v1.16$@$(clients, 1)
    save_data('clients.pickle', clients)

    # Modify a client
    modify_client(clients, 2, 'Mahra Ali', Address('456 Main St', 'City', 'State', 'Zip'), Budget(1500, 2500))
    save_data('clients.pickle', clients)

    # Display all clients
    display_clients(clients)

    # Display a client by ID
    display_client(clients, 2)

    # Add an employee
    new_employee = Employee(1, 'Sara Mohammed', Address('123 Main St', 'City', 'State', 'Zip'))
    add_employee(employees, new_employee)
    save_data('employees.pickle', employees)

    # Delete an employee
    delete_employee(employees, 1)
    save_data('employees.pickle', employees)

    # Modify an employee
    modify_employee(employees, 2, 'Mahra Ali', Address('456 Main St', 'City', 'State', 'Zip'))
    save_data('employees.pickle', employees)

    # Display all employees
    display_employees(employees)

    # Display an employee by ID
    display_employee(employees, 2)

    # Add a menu item
    create_menu_item(menu_items, 'Chicken', 15.99)
    save_data('menu_items.pickle', menu_items)

    # Delete a menu item
    delete_menu_item(menu_items, 'Chicken')
    save_data('menu_items.pickle', menu_items)

    # Modify a menu item
    modify_menu_item(menu_items, 'Beef', 17.99)
    save_data('menu_items.pickle', menu_items)

    # Display all menu items
    display_menu_items(menu_items)

    # Display a menu item by name
    display_menu_item(menu_items, 'Beef')

    # Add a venue
    new_venue = Venue('The Venue', Address('796 Main St', 'City', 'State', 'Zip'), 50, 200, 100)
    add_venue(venues, new_venue)
    save_data('venues.pickle', venues)

    # Delete a venue
    delete_venue(venues, 'The Venue')
    save_data('venues.pickle', venues)

    # Modify a venue
    modify_venue(venues, 'The Venue', Address('796 Main St', 'City', 'State', 'Zip'), 50, 200, 120)
    save_data('venues.pickle', venues)

    # Display all venues
    display_venues(venues)

    # Display a venue by name
    display_venue(venues, 'The Venue')

    # Add an event
    new_event = Event(1, '2023-02-01', '12:00 PM', '4 hours', venues[0], clients[0], [guests[0], guests[1]], caterers[0], cleaning_companies[0], decorations_companies[0], entertainment_companies[0], furniture_supply_companies[0], invoices[0])
    add_event(events, new_event)
    save_data('events.pickle', events)

    # Delete an event
    delete_event(events, 1)
    save_data('events.pickle', events)

    # Modify an event
    modify_event(events, 2, '2023-05-01', '1:00 PM', '5 hours', venues[1], clients[1], [guests[2], guests[3]], caterers[1], cleaning_companies[1], decorations_companies[1], entertainment_companies[1], furniture_supply_companies[1], invoices[1])$@$v=v1.16$@$save_data('events.pickle', events)

    # Display all events
    display_events(events)

    # Display an event by ID
    display_event(events, 2)

    # Calculate total cost of an event
    total_cost = calculate_total_cost(events[2])
    print(f'Total cost of event 2: {total_cost}')

if __name__ == '__main__':
    main()

#Additional Code 
import tkinter as tk
import re
import sqlite3
import unittest

# Point 1: Error handling
def display_employee(employees, employee_id):
    try:
        employee = next((employee for employee in employees if employee.id == employee_id), None)
        if employee:
            print(employee)
        else:
            print(f"No employee found with ID {employee_id}")
    except Exception as e:
        print(f"Error: {e}")

# Point 2: User interface
def add_employee():
    # Add employee code here
    pass

def delete_employee():
    # Delete employee code here
    pass

def modify_employee():
    # Modify employee code here
    pass

def display_employees():
    # Display employees code here
    pass

def display_employee_by_id():
    # Display employee by ID code here
    pass

root = tk.Tk()
root.title("Employee Management System")

menu = tk.Menu(root)
root.config(menu=menu)

file_menu = tk.Menu(menu, tearoff=0)
menu.add_cascade(label="File", menu=file_menu)
file_menu.add_command(label="Add Employee", command=add_employee)
file_menu.add_command(label="Delete Employee", command=delete_employee)
file_menu.add_command(label="Modify Employee", command=modify_employee)
file_menu.add_command(label="Display Employees", command=display_employees)
file_menu.add_command(label="Display Employee by ID", command=display_employee_by_id)

root.mainloop()

# Point 3: Data validation
def is_valid_date(date_string):
    pattern = r"^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$"
    if re.match(pattern, date_string):
        return True
    else:
        return False

# Point 4: Data persistence
def create_database():
    conn = sqlite3.connect("employees.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    department TEXT,
                    job_title TEXT,
                    basic_salary REAL)''')
    conn.commit
